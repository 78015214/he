{"remainingRequest":"/home/py/he/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/py/he/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/py/he/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/py/he/src/page/index.vue?vue&type=template&id=277d1ceb&scoped=true&","dependencies":[{"path":"/home/py/he/src/page/index.vue","mtime":1582994396550},{"path":"/home/py/he/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/py/he/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/py/he/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/py/he/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm._m(0)
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "shortcut " }, [
      _c("div", { staticClass: "Stripe" }, [
        _c("ul", { staticClass: "City" }, [
          _c("li", { staticClass: "ho_ver base-li" }, [
            _c("a", { staticClass: "ditu", attrs: { href: "#" } }, [
              _c("i", { staticClass: "tu_biao iconfont iconditu-dibiao" }),
              _c("span", { staticClass: "ui-areamini-text" }, [_vm._v("广东")])
            ]),
            _c("div", { staticClass: "dd" }, [
              _c("div", { staticClass: "region box2" }, [
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("北京")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("上海")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("天津")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("重庆")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("河北")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("山西")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("辽宁")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("吉林")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("黑龙江")])
                ]),
                _c("div", { staticClass: "reg_ion" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("河南")])
                ])
              ]),
              _c("div", { staticClass: "areamini_inter" }, [
                _c("p", { staticClass: "areamini_inter_desc" }, [
                  _vm._v("地区专享版本")
                ]),
                _c("a", { staticClass: "aa" }, [
                  _c("div", { staticClass: "areamini_inter_name" }, [
                    _vm._v("中國港澳")
                  ])
                ])
              ]),
              _c("div")
            ])
          ])
        ]),
        _c("ul", { staticClass: "fr" }, [
          _c("li", [
            _c("a", { staticClass: "dl", attrs: { target: "_blank" } }, [
              _vm._v("你好, 请登录")
            ]),
            _c(
              "a",
              {
                staticClass: "link-recgit color cover",
                attrs: { target: "_blank" }
              },
              [_vm._v("免费注册")]
            )
          ]),
          _c("li", { staticClass: "Vertical" }),
          _c("li", [
            _c("div", { staticClass: "dt" }, [
              _c("a", { attrs: { target: "_blank" } }, [_vm._v("我的订单")])
            ])
          ]),
          _c("li", { staticClass: "Vertical" }),
          _c("li", { staticClass: "base-li hd" }, [
            _c("div", { staticClass: "re_f" }, [
              _c("a", { attrs: { hretarget: "_blank" } }, [_vm._v("我的京东")]),
              _c("i", { staticClass: "size iconfont iconxiala1" })
            ]),
            _c("div", { staticClass: "jd" }, [
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("待处理订单")])
              ]),
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("消息")])
              ]),
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("返回退换货")])
              ]),
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("我的问答")])
              ]),
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("商品降价")])
              ]),
              _c("div", { staticClass: "wd" }, [
                _c("a", { attrs: { href: "" } }, [_vm._v("我的关注")])
              ]),
              _c("div", { staticClass: "Line" }),
              _c("div", { staticClass: "Underside" }, [
                _c("div", { staticClass: "within" }, [
                  _c("div", { staticClass: "wd" }, [
                    _c("a", { attrs: { href: "" } }, [_vm._v("我的京东")])
                  ]),
                  _c("div", { staticClass: "wd" }, [
                    _c("a", { attrs: { href: "" } }, [_vm._v("我的优惠券")])
                  ]),
                  _c("div", { staticClass: "wd" }, [
                    _c("a", { attrs: { href: "" } }, [_vm._v("我的白条")])
                  ]),
                  _c("div", { staticClass: "wd" }, [
                    _c("a", { attrs: { href: "" } }, [_vm._v("我的理财")])
                  ])
                ])
              ])
            ])
          ]),
          _c("li", { staticClass: "Vertical hy" }),
          _c("li", [
            _c("div", [
              _c("a", { staticClass: "_a", attrs: { target: "_blank" } }, [
                _vm._v("京东会员")
              ])
            ])
          ]),
          _c("li", { staticClass: "Vertical hy" }),
          _c("li", { staticClass: "base-li h_v" }, [
            _c("div", { staticClass: "hv" }, [
              _c("a", { staticClass: "cg", attrs: { target: "_blank" } }, [
                _vm._v("企业采购")
              ]),
              _c("i", { staticClass: "size iconfont iconxiala1" })
            ]),
            _c("div", { staticClass: "dd_b" }, [
              _c("div", { staticClass: "dd_c" }, [
                _c("div", { staticClass: "w_d" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("企业购")])
                ]),
                _c("div", { staticClass: "w_d" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("商用场景馆")])
                ]),
                _c("div", { staticClass: "w_d" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("工业品")])
                ]),
                _c("div", { staticClass: "w_d" }, [
                  _c("a", { attrs: { href: "" } }, [_vm._v("礼品卡")])
                ])
              ])
            ])
          ]),
          _c("li", { staticClass: "Vertical hy" }),
          _c("li", [
            _c("div", [
              _c("a", { attrs: { target: "_blank" } }, [_vm._v("客户服务")]),
              _c("i", { staticClass: "size iconfont iconxiala1" })
            ])
          ]),
          _c("li", { staticClass: "Vertical hy" }),
          _c("li", [
            _c("div", [
              _c("a", { attrs: { target: "_blank" } }, [_vm._v("网站导航")]),
              _c("i", { staticClass: "size iconfont iconxiala1" })
            ])
          ]),
          _c("li", { staticClass: "Vertical hy" }),
          _c("li", [
            _c("div", [
              _c("a", { attrs: { target: "_blank" } }, [_vm._v("手机京东")])
            ])
          ])
        ])
      ]),
      _c("div", { attrs: { id: "header" } }, [
        _c("div", { staticClass: "w" }, [
          _c("div", { staticClass: "logo" }, [
            _c("a", { staticClass: "ha", attrs: { href: "" } }, [
              _c("img", {
                staticClass: "im_g",
                attrs: { src: require("../assets/imgs/jd.gif"), alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "form" }, [
            _c("div", { staticClass: "search_bg" }, [_vm._v("小狗吸尘器")]),
            _c("input", { staticClass: "text", attrs: { type: "text" } }),
            _c("button", { staticClass: "btn" }, [
              _c("i", { staticClass: "iconfont iconsousuo s_ou" })
            ])
          ]),
          _c("div", { attrs: { id: "hotwords" } }, [
            _c("a", { staticClass: "style-red" }, [_vm._v("美味狂欢购")]),
            _c("a", { attrs: { target: "_blank", "data-idx": "1" } }, [
              _vm._v("小家电")
            ]),
            _c("a", { attrs: { clstag: "h|keycount|head|search_d03" } }, [
              _vm._v("健康用车")
            ]),
            _c("a", { attrs: { clstag: "h|keycount|head|search_d04" } }, [
              _vm._v("无抗养殖")
            ]),
            _c(
              "a",
              {
                attrs: { "data-idx": "4", clstag: "h|keycount|head|search_d05" }
              },
              [_vm._v("暖春行动")]
            ),
            _c(
              "a",
              {
                attrs: { "data-idx": "5", clstag: "h|keycount|head|search_d06" }
              },
              [_vm._v("9.9元")]
            ),
            _c(
              "a",
              {
                attrs: {
                  target: "_blank",
                  "data-idx": "6",
                  clstag: "h|keycount|head|search_d07"
                }
              },
              [_vm._v("提升免疫")]
            ),
            _c(
              "a",
              {
                attrs: { "data-idx": "7", clstag: "h|keycount|head|search_d08" }
              },
              [_vm._v("低至9.9")]
            ),
            _c(
              "a",
              {
                attrs: { "data-idx": "8", clstag: "h|keycount|head|search_d09" }
              },
              [_vm._v("每100-50")]
            )
          ]),
          _c("div", { attrs: { id: "navitems" } }, [
            _c("ul", { attrs: { id: "navitems-group1" } }, [
              _c("li", { staticClass: "fore1" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("秒杀")])
              ]),
              _c("li", { staticClass: "fore2" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("优惠券")])
              ]),
              _c("li", { staticClass: "fore3" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("PLUS会员")])
              ]),
              _c("li", { staticClass: "fore4" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("品牌闪购")])
              ]),
              _c("li", { staticClass: "fore5" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("拍卖")])
              ]),
              _c("li", { staticClass: "fore6" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("京东家电")])
              ]),
              _c("li", { staticClass: "fore7" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("京东超市")])
              ]),
              _c("li", { staticClass: "fore8" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("京东生鲜")])
              ]),
              _c("li", { staticClass: "fore9" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("京东国际")])
              ]),
              _c("li", { staticClass: "fore10" }, [
                _c("a", { staticClass: "navitems-lk" }, [_vm._v("京东金融")])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "fs" }, [
        _c("div", { staticClass: "grid_c1 fs_inner" }, [
          _c("div", { staticClass: "fs_col1" }, [
            _c(
              "div",
              { staticClass: "cate J_cate cate18", attrs: { id: "J_cate" } },
              [
                _c("ul", { staticClass: "JS_navCtn cate_menu" }, [
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "1",
                        clstag: "h|keycount|head|category_01a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//jiadian.jd.com" }
                        },
                        [_vm._v("家用电器")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "2",
                        clstag: "h|keycount|head|category_02a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//shouji.jd.com/" }
                        },
                        [_vm._v("手机")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//wt.jd.com" }
                        },
                        [_vm._v("运营商")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//shuma.jd.com/" }
                        },
                        [_vm._v("数码")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "3",
                        clstag: "h|keycount|head|category_03a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//diannao.jd.com/" }
                        },
                        [_vm._v("电脑")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//bg.jd.com" }
                        },
                        [_vm._v("办公")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "4",
                        clstag: "h|keycount|head|category_04a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/home.html"
                          }
                        },
                        [_vm._v("家居")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/furniture.html"
                          }
                        },
                        [_vm._v("家具")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//jzjc.jd.com/" }
                        },
                        [_vm._v("家装")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/kitchenware.html"
                          }
                        },
                        [_vm._v("厨具")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "5",
                        clstag: "h|keycount|head|category_05a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/1315-1342.html"
                          }
                        },
                        [_vm._v("男装")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/1315-1343.html"
                          }
                        },
                        [_vm._v("女装")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//phat.jd.com/10-156.html"
                          }
                        },
                        [_vm._v("童装")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/1315-1345.html"
                          }
                        },
                        [_vm._v("内衣")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "6",
                        clstag: "h|keycount|head|category_06a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//beauty.jd.com/" }
                        },
                        [_vm._v("美妆")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/beauty.html"
                          }
                        },
                        [_vm._v("个护清洁")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/pet.html"
                          }
                        },
                        [_vm._v("宠物")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item cate_menu_item_on",
                      attrs: {
                        "data-index": "7",
                        clstag: "h|keycount|head|category_07a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//phat.jd.com/10-184.html"
                          }
                        },
                        [_vm._v("女鞋")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//phat.jd.com/10-183.html"
                          }
                        },
                        [_vm._v("箱包")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/watch.html"
                          }
                        },
                        [_vm._v("钟表")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/jewellery.html"
                          }
                        },
                        [_vm._v("珠宝")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "8",
                        clstag: "h|keycount|head|category_08a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//phat.jd.com/10-185.html"
                          }
                        },
                        [_vm._v("男鞋")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//phat.jd.com/10-109.html"
                          }
                        },
                        [_vm._v("运动")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/outdoor.html"
                          }
                        },
                        [_vm._v("户外")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "9",
                        clstag: "h|keycount|head|category_09a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//xinfang.jd.com/" }
                        },
                        [_vm._v("房产")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//car.jd.com/" }
                        },
                        [_vm._v("汽车")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//che.jd.com/" }
                        },
                        [_vm._v("汽车用品")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "10",
                        clstag: "h|keycount|head|category_10a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//baby.jd.com" }
                        },
                        [_vm._v("母婴")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//toy.jd.com/" }
                        },
                        [_vm._v("玩具乐器")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "11",
                        clstag: "h|keycount|head|category_11a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//food.jd.com/" }
                        },
                        [_vm._v("食品")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//jiu.jd.com" }
                        },
                        [_vm._v("酒类")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//fresh.jd.com" }
                        },
                        [_vm._v("生鲜")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//china.jd.com" }
                        },
                        [_vm._v("特产")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "12",
                        clstag: "h|keycount|head|category_12a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//art.jd.com" }
                        },
                        [_vm._v("艺术")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/1672-2599.html"
                          }
                        },
                        [_vm._v("礼品鲜花")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//nong.jd.com" }
                        },
                        [_vm._v("农资绿植")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "13",
                        clstag: "h|keycount|head|category_13a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//health.jd.com" }
                        },
                        [_vm._v("医药保健")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//channel.jd.com/9192-9196.html"
                          }
                        },
                        [_vm._v("计生情趣")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "14",
                        clstag: "h|keycount|head|category_14a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//book.jd.com/" }
                        },
                        [_vm._v("图书")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//mvd.jd.com/" }
                        },
                        [_vm._v("文娱")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//education.jd.com"
                          }
                        },
                        [_vm._v("教育")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//e.jd.com/ebook.html"
                          }
                        },
                        [_vm._v("电子书")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "15",
                        clstag: "h|keycount|head|category_15a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//jipiao.jd.com/" }
                        },
                        [_vm._v("机票")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//hotel.jd.com/" }
                        },
                        [_vm._v("酒店")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//trip.jd.com/" }
                        },
                        [_vm._v("旅游")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//ish.jd.com/" }
                        },
                        [_vm._v("生活")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "16",
                        clstag: "h|keycount|head|category_16a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//licai.jd.com/" }
                        },
                        [_vm._v("理财")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//z.jd.com/" }
                        },
                        [_vm._v("众筹")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//baitiao.jd.com" }
                        },
                        [_vm._v("白条")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//bao.jd.com/" }
                        },
                        [_vm._v("保险")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "17",
                        clstag: "h|keycount|head|category_17a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//anzhuang.jd.com" }
                        },
                        [_vm._v("安装")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//jdwx.jd.com" }
                        },
                        [_vm._v("维修")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: {
                            target: "_blank",
                            href: "//cleanclean.jd.com"
                          }
                        },
                        [_vm._v("清洗")]
                      ),
                      _c("span", { staticClass: "cate_menu_line" }, [
                        _vm._v("/")
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//2.paipai.com/" }
                        },
                        [_vm._v("二手")]
                      )
                    ]
                  ),
                  _c(
                    "li",
                    {
                      staticClass: "cate_menu_item",
                      attrs: {
                        "data-index": "18",
                        clstag: "h|keycount|head|category_18a"
                      }
                    },
                    [
                      _c(
                        "a",
                        {
                          staticClass: "cate_menu_lk",
                          attrs: { target: "_blank", href: "//imall.jd.com/" }
                        },
                        [_vm._v("工业品")]
                      )
                    ]
                  )
                ])
              ]
            )
          ]),
          _c("div", { staticClass: "fs_col2" }, [
            _c("div", { staticClass: "focus", attrs: { id: "J_focus" } }, [
              _c("div", { staticClass: "focus-slider" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "focus-item__core skeleton-elementDark mod_lazyload"
                  },
                  [
                    _c("a", { attrs: { href: "" } }, [
                      _c("img", {
                        attrs: {
                          src: require("../assets/imgs/590x470.jpg"),
                          alt: ""
                        }
                      })
                    ])
                  ]
                ),
                _c("div", { staticClass: "focus-item__recommend" }, [
                  _c(
                    "div",
                    { staticClass: "recommend-item skeleton-elementDark" },
                    [
                      _c("a", { attrs: { href: "" } }, [
                        _c("img", {
                          attrs: {
                            src: require("../assets/imgs/49e1b9b189d43ba9.jpg"),
                            alt: ""
                          }
                        })
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "recommend-item skeleton-elementDark" },
                    [
                      _c("a", { attrs: { href: "" } }, [
                        _c("img", {
                          attrs: {
                            src: require("../assets/imgs/2837589028fb3a71.jpg"),
                            alt: ""
                          }
                        })
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "recommend-item skeleton-elementDark" },
                    [
                      _c("a", { attrs: { href: "" } }, [
                        _c("img", {
                          attrs: {
                            src: require("../assets/imgs/8bffc82c31114e62.jpg"),
                            alt: ""
                          }
                        })
                      ])
                    ]
                  )
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "fs_col3", attrs: { id: "J_fs_col3" } }, [
            _c(
              "div",
              {
                staticClass: "J_user user mod_loading",
                attrs: { id: "J_user" }
              },
              [
                _c("div", { staticClass: "user_inner user_plus0" }, [
                  _c("div", [
                    _c("div", { staticClass: "J_user_avatar user_avatar" }, [
                      _c(
                        "a",
                        {
                          staticClass: "user_avatar_lk",
                          attrs: {
                            href: "//home.jd.com",
                            target: "_blank",
                            clstag: "h|keycount|head|login_01",
                            "aria-label": "个人头像"
                          }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src:
                                "data:image/png;base64,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"
                            }
                          })
                        ]
                      )
                    ]),
                    _c(
                      "div",
                      {
                        staticClass: "user_show",
                        attrs: { clstag: "h|keycount|head|login_01" }
                      },
                      [
                        _c(
                          "a",
                          {
                            staticClass: "user_tip",
                            attrs: { href: "javascript:login(true);" }
                          },
                          [_vm._v("Hi~欢迎逛京东！")]
                        ),
                        _c("p", [
                          _c(
                            "a",
                            {
                              staticClass: "user_login",
                              attrs: { href: "javascript:login()" }
                            },
                            [_vm._v("登录")]
                          ),
                          _vm._v(" | "),
                          _c(
                            "a",
                            {
                              staticClass: "user_reg",
                              attrs: { href: "javascript:regist()" }
                            },
                            [_vm._v("注册")]
                          )
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "user_profit" }, [
                    _c(
                      "a",
                      {
                        staticClass: "user_profit_lk",
                        attrs: {
                          href: "//xinren.jd.com/?channel=99",
                          target: "_blank",
                          clstag: "h|keycount|head|login_04"
                        }
                      },
                      [_vm._v("新人福利")]
                    ),
                    _c(
                      "a",
                      {
                        staticClass: "user_profit_lk user_profit_lk_plus",
                        attrs: {
                          href:
                            "//plus.jd.com/index?flow_system=appicon&flow_entrance=appicon3&flow_channel=pc",
                          target: "_blank",
                          clstag: "h|keycount|head|login_03"
                        }
                      },
                      [_vm._v("PLUS会员")]
                    )
                  ])
                ])
              ]
            )
          ])
        ])
      ]),
      _c("div", { staticClass: "J_app" }, [
        _c("div", { staticClass: "J_seckill" }, [
          _c("div", { staticClass: "jd_container seckill__inner" }, [
            _c("a", { staticClass: "seckill-countdown", attrs: { href: "" } }, [
              _c("div", { staticClass: "countdown-title" }, [
                _vm._v("京东秒杀")
              ]),
              _c("div", [
                _c("div", { staticClass: "countdown-desc" }, [
                  _c("strong", [_vm._v("22:00")]),
                  _vm._v(' "点场 倒计时" ')
                ]),
                _c("span", { staticClass: "timmer countdown-main" }, [
                  _c(
                    "span",
                    { staticClass: "timmer__unit timmer__unit--hour" },
                    [_vm._v("05")]
                  ),
                  _c(
                    "span",
                    { staticClass: "timmer__unit timmer__unit--minute" },
                    [_vm._v("28")]
                  ),
                  _c(
                    "span",
                    { staticClass: "timmer__unit timmer__unit--second" },
                    [_vm._v("08")]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "seckill-list" }, [
              _c("div", { staticClass: "slider" }, [
                _c(
                  "button",
                  { staticClass: "slider_control slider_control_prev" },
                  [_c("i", { staticClass: "iconfont iconzuojiantou zuo" })]
                ),
                _c("div", { staticClass: "slider_list" }, [
                  _c(
                    "a",
                    {
                      staticClass: "slider_item seckill-item slider_active",
                      attrs: { href: "" }
                    },
                    [
                      _c(
                        "div",
                        {
                          staticClass:
                            "lazyimg lazyimg_loaded seckill-item__image"
                        },
                        [
                          _c("img", {
                            staticClass: "lazyimg_img",
                            attrs: {
                              src: require("../assets/imgs/e0a.jpg"),
                              alt: ""
                            }
                          })
                        ]
                      ),
                      _c("h6", { staticClass: "seckill-item__name" }, [
                        _vm._v(
                          "华为mate30 手机(5G/4G版可选)（白条12期免息0首付） 亮黑色 8GB+128GB全网通（5G版）"
                        )
                      ]),
                      _c("div", { staticClass: "seckill-item__price" }, [
                        _c("span", { staticClass: "price-miaosha" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("35.00")])
                        ]),
                        _c("span", { staticClass: "price-origin" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("80.00")])
                        ])
                      ])
                    ]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "slider_item seckill-item slider_active",
                      attrs: { href: "" }
                    },
                    [
                      _c(
                        "div",
                        {
                          staticClass:
                            "lazyimg lazyimg_loaded seckill-item__image"
                        },
                        [
                          _c("img", {
                            staticClass: "lazyimg_img",
                            attrs: {
                              src: require("../assets/imgs/e0a.jpg"),
                              alt: ""
                            }
                          })
                        ]
                      ),
                      _c("h6", { staticClass: "seckill-item__name" }, [
                        _vm._v(
                          "华为mate30 手机(5G/4G版可选)（白条12期免息0首付） 亮黑色 8GB+128GB全网通（5G版）"
                        )
                      ]),
                      _c("div", { staticClass: "seckill-item__price" }, [
                        _c("span", { staticClass: "price-miaosha" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("35.00")])
                        ]),
                        _c("span", { staticClass: "price-origin" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("80.00")])
                        ])
                      ])
                    ]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "slider_item seckill-item slider_active",
                      attrs: { href: "" }
                    },
                    [
                      _c(
                        "div",
                        {
                          staticClass:
                            "lazyimg lazyimg_loaded seckill-item__image"
                        },
                        [
                          _c("img", {
                            staticClass: "lazyimg_img",
                            attrs: {
                              src: require("../assets/imgs/e0a.jpg"),
                              alt: ""
                            }
                          })
                        ]
                      ),
                      _c("h6", { staticClass: "seckill-item__name" }, [
                        _vm._v(
                          "华为mate30 手机(5G/4G版可选)（白条12期免息0首付） 亮黑色 8GB+128GB全网通（5G版）"
                        )
                      ]),
                      _c("div", { staticClass: "seckill-item__price" }, [
                        _c("span", { staticClass: "price-miaosha" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("35.00")])
                        ]),
                        _c("span", { staticClass: "price-origin" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("80.00")])
                        ])
                      ])
                    ]
                  ),
                  _c(
                    "a",
                    {
                      staticClass: "slider_item seckill-item slider_active",
                      attrs: { href: "" }
                    },
                    [
                      _c(
                        "div",
                        {
                          staticClass:
                            "lazyimg lazyimg_loaded seckill-item__image"
                        },
                        [
                          _c("img", {
                            staticClass: "lazyimg_img",
                            attrs: {
                              src: require("../assets/imgs/e0a.jpg"),
                              alt: ""
                            }
                          })
                        ]
                      ),
                      _c("h6", { staticClass: "seckill-item__name" }, [
                        _vm._v(
                          "华为mate30 手机(5G/4G版可选)（白条12期免息0首付） 亮黑色 8GB+128GB全网通（5G版）"
                        )
                      ]),
                      _c("div", { staticClass: "seckill-item__price" }, [
                        _c("span", { staticClass: "price-miaosha" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("35.00")])
                        ]),
                        _c("span", { staticClass: "price-origin" }, [
                          _c("i", [_vm._v("￥")]),
                          _c("span", [_vm._v("80.00")])
                        ])
                      ])
                    ]
                  )
                ]),
                _c(
                  "button",
                  { staticClass: "slider_control slider_control_next" },
                  [_c("i", { staticClass: "iconfont iconyoujiantou-copy zuo" })]
                )
              ])
            ]),
            _c("div", { staticClass: "seckill-brand" }, [
              _c("div", { staticClass: "slider seckill-brand__slider" }, [
                _c("div", { staticClass: "slider_list" }, [
                  _c("div", { staticClass: "slider_wrapper" }, [
                    _c(
                      "a",
                      {
                        staticClass: "slider_item brand-item",
                        attrs: { href: "" }
                      },
                      [
                        _c("div", { staticClass: "item-image" }, [
                          _c("div", { staticClass: "lazyimg lazyimg_loaded" }, [
                            _c("img", {
                              staticClass: "lazyimg_img",
                              attrs: {
                                src: require("../assets/imgs/acf.png"),
                                alt: ""
                              }
                            })
                          ])
                        ]),
                        _c("div", { staticClass: "item-info" }, [
                          _c("div", { staticClass: "item-info" }, [
                            _c("p", { staticClass: "item-info-title" }, [
                              _vm._v("Apple品类秒杀")
                            ]),
                            _c("p", { staticClass: "item-info-promo" }, [
                              _vm._v("Mac低至7099元")
                            ]),
                            _c("div", { staticClass: "item-info-action" }, [
                              _vm._v(" 品类秒杀 ")
                            ])
                          ])
                        ])
                      ]
                    )
                  ])
                ])
              ])
            ])
          ])
        ]),
        _c("div", { staticClass: "J_spec" }, [
          _c(
            "div",
            {
              staticClass: "core1 jd_container floor",
              attrs: { id: "J_spec" }
            },
            [
              _c("div", { staticClass: "grid_c1 core1_inner" }, [
                _c(
                  "div",
                  {
                    staticClass: "box special_offer grid_c2",
                    attrs: { id: "J_special_offer" }
                  },
                  [
                    _c("div", { staticClass: "box_hd" }, [
                      _c(
                        "a",
                        { staticClass: "box_hd_lk", attrs: { href: "" } },
                        [
                          _c("h3", { staticClass: "box_tit" }, [
                            _vm._v("每日特价")
                          ]),
                          _c("i", { staticClass: "box_hd_arrow" })
                        ]
                      )
                    ]),
                    _c("div", { staticClass: "box_bd" })
                  ]
                )
              ])
            ]
          )
        ])
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}